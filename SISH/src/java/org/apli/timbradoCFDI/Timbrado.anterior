package org.apli.timbradoCFDI;
import org.apli.manejoArchivos.ManejoArchivos;
import org.apli.manejoArchivos.NombradoArchivosCarpetas;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import org.apli.modelbeans.facturacion.cfdi.v32.schema.Comprobante;
import org.apli.ws.facturacion.ArrayOfString;
/*
 * Autor: Isabel Espinoza
 * Objetivo: Clase para realizar el timbrado y cancelacion de CFDI
 */
public class Timbrado implements Serializable{
        FacesMessage msj  = new FacesMessage();
        private String sXmlCancelado;
        private String sXmlTimbrado;
        private String sRfcReceptor;
        private String sRfcEmisor;
        private String sUsuario;
        private String sPassword;
        private String sPasswordEmisor;
        private String sUUID;
        private String sNoCertificado;
        private String sCertificado;
        private String sSello;
        private NombradoArchivosCarpetas oNombradoArchCar=new NombradoArchivosCarpetas();
	public void guardarXml(String tipo,String xml) throws IOException {
            oNombradoArchCar.setRfc(sRfcReceptor);
            String sFichero="";
            if(tipo.equals("Timbrado"))
                sFichero =oNombradoArchCar.getNombreCarpetaXML()+"/"+oNombradoArchCar.getFileXML();
            else if (tipo.equals("Cancelado"))
                sFichero =oNombradoArchCar.getNombreCarpetaXMLCancelados()+"/"+oNombradoArchCar.getFileXML();
            FileWriter oArchivoEscritura = new FileWriter(sFichero);
            oArchivoEscritura.write(xml);
            oArchivoEscritura.close();
	}
	public String getCadenaDeXML(String rfc)throws IOException{
            BufferedReader xmlLectura=null;
            File archivoBitacoraLectura=null;
            oNombradoArchCar.setRfc(rfc);
            String archivoXML=oNombradoArchCar.getNombreCarpetaXML()+"/"+oNombradoArchCar.getFileXML();
            xmlLectura=ManejoArchivos.abrirArchivo(archivoBitacoraLectura, xmlLectura,archivoXML);
            String lecturaXML="";
            //while (xmlLectura.ready()){
              //  lecturaXML=lecturaXML+xmlLectura.readLine();	
            //}
            return lecturaXML;
	}
        public boolean solicitarTimbreFiscal() throws IOException{
            String xml=getCadenaDeXML(this.sRfcReceptor);
            ArrayOfString arreglo=Timbrado.timbrarCFDPrueba(this.sUsuario,this.sPassword,xml);
            List<String> resultado=arreglo.getString();
            if(resultado.get(0).equals("")&&resultado.get(1).equals("")&&resultado.get(2).equals("")){
                this.sXmlTimbrado=resultado.get(3);
                guardarXml("Timbrado",this.sXmlTimbrado);
                return true;
            }else{
                String rst="Error: "+resultado.get(0)+", "+resultado.get(1);
                FacesMessage msj2= new FacesMessage(FacesMessage.SEVERITY_ERROR,rst,"");
                FacesContext.getCurrentInstance().addMessage(null, msj2);
                return true;
            }
        }
        public boolean solicitarCancelacionCFDI() throws IOException{
            ArrayOfString arregloUUID=new ArrayOfString();
            arregloUUID.getString().add(sUUID);
            ExternalContext extCont= FacesContext.getCurrentInstance().getExternalContext();
            String certificadoPKCS12Base64=(extCont.getRealPath("//BovedaFiscal//Certificados//"))+"\\"+this.sRfcEmisor+".pem";
            ArrayOfString arreglo=Timbrado.cancelarCFDI(sUsuario, sPassword, this.sRfcEmisor, arregloUUID, certificadoPKCS12Base64, this.sPasswordEmisor);
            List<String> resultado=arreglo.getString();
            if(resultado.get(1).equals("201")){
                this.sXmlCancelado=resultado.get(2);
                guardarXml("Cancelado",this.sXmlCancelado);
                return true;
            }else{
                String rst="Error: "+resultado.get(1);
                FacesMessage msj2= new FacesMessage(FacesMessage.SEVERITY_ERROR,rst,"");
                FacesContext.getCurrentInstance().addMessage(null, msj2);
                return true;
            }
            
        }
        
        private static ArrayOfString timbrarCFDPrueba(String usuario, String password, String cadena) {
            org.apli.ws.facturacion.WSTFD service = new org.apli.ws.facturacion.WSTFD();
            org.apli.ws.facturacion.WSTFDSoap port = service.getWSTFDSoap();
            return port.timbrarCFDPrueba(usuario, password, cadena);
        }
        private static ArrayOfString cancelarCFDI(String usuario, String password, String rfcEmisor, org.apli.ws.facturacion.ArrayOfString listaCFDI, String certificadoPKCS12Base64, String passwordPKCS12) {
            org.apli.ws.facturacion.WSTFD service = new org.apli.ws.facturacion.WSTFD();
            org.apli.ws.facturacion.WSTFDSoap port = service.getWSTFDSoap();
            return port.cancelarCFDI(usuario, password, rfcEmisor, listaCFDI, certificadoPKCS12Base64, passwordPKCS12);
        }
        public void obtenerDatosComplementariosCFDI(Comprobante comprobante) throws IOException{
            boolean bandera;
            sXmlTimbrado=this.getCadenaDeXML(this.sRfcReceptor);
            for(int x=0;x<sXmlTimbrado.length();x++){
                if(sXmlTimbrado.charAt(x)=='c')
                    if(sXmlTimbrado.charAt(x+1)=='e')
                        if(sXmlTimbrado.charAt(x+2)=='r')
                            if(sXmlTimbrado.charAt(x+3)=='t')
                                if(sXmlTimbrado.charAt(x+4)=='i')
                                    if(sXmlTimbrado.charAt(x+5)=='f')
                                        if(sXmlTimbrado.charAt(x+6)=='i')
                                            if(sXmlTimbrado.charAt(x+7)=='c')
                                                if(sXmlTimbrado.charAt(x+8)=='a')
                                                    if(sXmlTimbrado.charAt(x+9)=='d')
                                                        if(sXmlTimbrado.charAt(x+10)=='o')
                                                            if(sXmlTimbrado.charAt(x+11)=='=')
                                                                if(sXmlTimbrado.charAt(x+12)=='"'){
                                                                    this.sCertificado="";
                                                                    bandera=true;
                                                                    x=x+13;
                                                                    while(bandera){
                                                                        this.sCertificado=this.sCertificado+sXmlTimbrado.charAt(x);    
                                                                        x++;
                                                                        if(sXmlTimbrado.charAt(x)=='\"')
                                                                            bandera=false;
                                                                    }
                                                                    break;
                                                                }
            }
            for(int x=0;x<sXmlTimbrado.length();x++){
                if(sXmlTimbrado.charAt(x)=='n')
                    if(sXmlTimbrado.charAt(x+1)=='o')
                        if(sXmlTimbrado.charAt(x+2)=='C')
                            if(sXmlTimbrado.charAt(x+3)=='e')
                                if(sXmlTimbrado.charAt(x+4)=='r')
                                    if(sXmlTimbrado.charAt(x+5)=='t')
                                        if(sXmlTimbrado.charAt(x+6)=='i')
                                            if(sXmlTimbrado.charAt(x+7)=='f')
                                                if(sXmlTimbrado.charAt(x+8)=='i')
                                                    if(sXmlTimbrado.charAt(x+9)=='c')
                                                        if(sXmlTimbrado.charAt(x+10)=='a')
                                                            if(sXmlTimbrado.charAt(x+11)=='d')
                                                                if(sXmlTimbrado.charAt(x+12)=='o')
                                                                    if(sXmlTimbrado.charAt(x+13)=='=')
                                                                        if(sXmlTimbrado.charAt(x+14)=='"'){
                                                                            this.sNoCertificado="";
                                                                            bandera=true;
                                                                            x=x+15;
                                                                            while(bandera){
                                                                                this.sNoCertificado=this.sNoCertificado+sXmlTimbrado.charAt(x);    
                                                                                x++;
                                                                                if(sXmlTimbrado.charAt(x)=='\"')
                                                                                    bandera=false;
                                                                            }
                                                                            break;
                                                                        }
            }
            for(int x=0;x<sXmlTimbrado.length();x++){
                if(sXmlTimbrado.charAt(x)=='s')
                    if(sXmlTimbrado.charAt(x+1)=='e')
                        if(sXmlTimbrado.charAt(x+2)=='l')
                            if(sXmlTimbrado.charAt(x+3)=='l')
                                if(sXmlTimbrado.charAt(x+4)=='o')
                                    if(sXmlTimbrado.charAt(x+5)=='=')
                                        if(sXmlTimbrado.charAt(x+6)=='"'){
                                            this.sSello="";
                                            bandera=true;
                                            x=x+7;
                                            while(bandera){
                                                this.sSello=this.sSello+sXmlTimbrado.charAt(x);    
                                                x++;
                                                if(sXmlTimbrado.charAt(x)=='\"')
                                                    bandera=false;
                                            }
                                            break;
                                        }
            }
            for(int x=0;x<sXmlTimbrado.length();x++){
                if(sXmlTimbrado.charAt(x)=='U')
                    if(sXmlTimbrado.charAt(x+1)=='U')
                        if(sXmlTimbrado.charAt(x+2)=='I')
                            if(sXmlTimbrado.charAt(x+3)=='D')
                                if(sXmlTimbrado.charAt(x+4)=='=')
                                    if(sXmlTimbrado.charAt(x+5)=='"'){
                                        this.sUUID="";
                                        bandera=true;
                                        x=x+6;
                                        while(bandera){
                                            this.sUUID=this.sUUID+sXmlTimbrado.charAt(x);    
                                            x++;
                                            if(sXmlTimbrado.charAt(x)=='\"')
                                                bandera=false;
                                        }
                                        break;
                                    }
            }
            comprobante.setNoCertificadoSAT(sNoCertificado);
            comprobante.setCertificadoSAT(sCertificado);
            comprobante.setSelloSAT(sSello);
            comprobante.setUuid(sUUID);
        }
        public String getUsuario() {
            return sUsuario;
        }
        public void setUsuario(String usuario) {
            this.sUsuario = usuario;
        }
        public String getPassword() {
            return sPassword;
        }
	public void setPassword(String password) {
		this.sPassword = password;
	}
	public String getRfcReceptor(){
	    	return sRfcReceptor;
	}
	public void setRfcReceptor(String rec){
	    	sRfcReceptor=rec;
	}
	public String getXmlTimbrado() {
		return sXmlTimbrado;
	}
        public String getRfcEmisor() {
           return sRfcEmisor;
        }
        public void setRfcEmisor(String sRfcEmisor) {
            this.sRfcEmisor = sRfcEmisor;
        }
        public String getUUID() {
            return sUUID;
        }
        public void setUUID(String sUUID) {
            this.sUUID = sUUID;
        }
        public String getPasswordEmisor() {
           return sPasswordEmisor;
        }
        public void setPasswordEmisor(String sPasswordEmisor) {
            this.sPasswordEmisor = sPasswordEmisor;
        }
}
